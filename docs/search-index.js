var searchIndex = {};
searchIndex["async_http_client"] = {"doc":"Asynchronous HTTP client.","items":[[3,"HttpResponse","async_http_client","Representation of an HTTP response.",null,null],[3,"Header","","Representation of a header.",null,null],[3,"HttpRequest","","Representation of an HTTP request.",null,null],[3,"HttpCodec","","Codec that parses HTTP responses.",null,null],[4,"Method","","Representation of an HTTP method.",null,null],[13,"Get","","",0,null],[13,"Head","","",0,null],[13,"Post","","",0,null],[13,"Put","","",0,null],[13,"Delete","","",0,null],[13,"Connect","","",0,null],[13,"Options","","",0,null],[13,"Trace","","",0,null],[13,"Other","","",0,null],[0,"prelude","","Commonly needed reexports from futures and tokio-core.",null,null],[8,"Io","async_http_client::prelude","A trait for read/write I/O objects",null,null],[11,"poll_read","","Tests to see if this I/O object may be readable.",1,null],[11,"poll_write","","Tests to see if this I/O object may be writable.",1,null],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this\n`Io` object, using `Decode` and `Encode` to read and write the raw data.",1,null],[11,"split","","Helper method for splitting this read/write object into two halves.",1,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"Core","","An event loop.",null,null],[8,"Future","","Trait for types which are a placeholder of a value that will become\navailable at possible some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is\nsuccessful.",2,null],[16,"Error","","The type of error that this future will resolve with if it fails in a\nnormal fashion.",2,null],[10,"poll","","Query this future to see if its value has become available, registering\ninterest if it is not.",2,null],[11,"wait","","Block the current thread until this future is resolved.",2,null],[11,"boxed","","Convenience function for turning this future into a trait object.",2,null],[11,"map","","Map this future&#39;s result to a different type, returning a new future of\nthe resulting type.",2,null],[11,"map_err","","Map this future&#39;s error to a different error, returning a new future.",2,null],[11,"then","","Chain on a computation for when a future finished, passing the result of\nthe future to the provided closure `f`.",2,null],[11,"and_then","","Execute another future after this one has resolved successfully.",2,null],[11,"or_else","","Execute another future if this one resolves with an error.",2,null],[11,"select","","Waits for either one of two futures to complete.",2,null],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,null],[11,"join3","","Same as `join`, but with more futures.",2,null],[11,"join4","","Same as `join`, but with more futures.",2,null],[11,"join5","","Same as `join`, but with more futures.",2,null],[11,"into_stream","","Convert this future into single element stream.",2,null],[11,"flatten","","Flatten the execution of this future when the successful result of this\nfuture is itself another future.",2,null],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this\nfuture is a stream.",2,null],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has\ncompleted.",2,null],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,null],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",3,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",3,null],[10,"start_send","","Begin the process of sending a value to the sink.",3,null],[10,"poll_complete","","Make progress on all pending requests, and determine whether they have\ncompleted.",3,null],[11,"with","","Composes a function *in front of* the sink.",3,null],[11,"buffer","","Adds a fixed-size buffer to the current sink.",3,null],[11,"flush","","A future that completes when the sink has finished processing all\npending requests.",3,null],[11,"send","","A future that completes after the given item has been fully processed\ninto the sink, including flushing.",3,null],[11,"send_all","","A future that completes after the given stream has been fully processed\ninto the sink, including flushing.",3,null],[8,"Stream","","A stream of values, not all of which have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",4,null],[16,"Error","","The type of error this stream may generate.",4,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if\nthe stream is finished.",4,null],[11,"wait","","Creates an iterator which blocks the current thread until each item of\nthis stream is resolved.",4,null],[11,"boxed","","Convenience function for turning this stream into a trait object.",4,null],[11,"into_future","","Converts this stream into a `Future`.",4,null],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,null],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,null],[11,"filter","","Filters the values produced by this stream according to the provided\npredicate.",4,null],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping\nthem to a different type.",4,null],[11,"then","","Chain on a computation for when a value is ready, passing the resulting\nitem to the provided closure `f`.",4,null],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful\nresults to the provided closure `f`.",4,null],[11,"or_else","","Chain on a computation for when an error happens, passing the\nerroneous result to the provided closure `f`.",4,null],[11,"collect","","Collect all of the values of this stream into a vector, returning a\nfuture representing the result of that computation.",4,null],[11,"fold","","Execute an accumulating computation over a stream, collecting all the\nvalues into one final result.",4,null],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,null],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to\n`true`.",4,null],[11,"for_each","","Runs this stream to completion, executing the provided closure for each\nelement on the stream.",4,null],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,null],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,null],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has\nfinished.",4,null],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,null],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,null],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,null],[11,"merge","","An adapter for merging the output of two streams.",4,null],[11,"zip","","An adapter for zipping two streams together.",4,null],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,null],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,null],[11,"select","","Creates a stream that selects the next element from either this stream\nor the provided one, whichever is ready first.",4,null],[11,"forward","","A future that completes after the given stream has been fully processed\ninto the sink, including flushing.",4,null],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink`\nobjects, which can be useful when you want to split ownership between\ntasks, or allow direct interaction between the two objects (e.g. via\n`Sink::send_all`).",4,null],[8,"IntoFuture","","Class of types which can be converted themselves into a future.",null,null],[16,"Future","","The future that this type can be converted into.",5,null],[16,"Item","","The item that the future may resolve with.",5,null],[16,"Error","","The error that the future may resolve with.",5,null],[10,"into_future","","Consumes this object and produces a future.",5,null],[6,"BoxFuture","","A type alias for `Box&lt;Future + Send&gt;`",null,null],[5,"empty","","Creates a future which never resolves, representing a computation that never\nfinishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"err","","Creates a &quot;leaf future&quot; from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"err"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created\nby the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"ok","","Creates a &quot;leaf future&quot; from an immediate value of a finished and\nsuccessful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"ok"}}],[5,"result","","Creates a new &quot;leaf future&quot; which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[11,"eq","async_http_client","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"status","","Returns the status code of this response.",7,null],[11,"is","","Returns true if this response has a header with the given `name`\nthat matches the expected `value`.",7,null],[11,"has","","Returns true if this response has a header with the given `name`\nthat has a comma-separated list of values, and one of those values\nmatches the `expected` value.",7,null],[11,"is_informational","","Returns true if this response has a 1xx Informational status code.",7,null],[11,"is_successful","","Returns true if this response has a 2xx Successful status code.",7,null],[11,"is_redirection","","Returns true if this response has a 3xx Redirection status code.",7,null],[11,"is_client_error","","Returns true if this response has a 4xx Client Error status code.",7,null],[11,"is_server_error","","Returns true if this response isisis a 5xx Server Error status code.",7,null],[11,"index","","Retrieve the header with the given name.",7,null],[11,"fmt","","",7,null],[11,"fmt","","",0,null],[11,"new","","Creates a new HTTP request.",8,{"inputs":[{"name":"method"},{"name":"u"}],"output":{"name":"result"}}],[11,"header","","",8,null],[11,"get","","",8,{"inputs":[{"name":"u"}],"output":{"name":"result"}}],[11,"post","","",8,{"inputs":[{"name":"u"},{"name":"i"}],"output":{"name":"result"}}],[11,"addr","","",8,null],[11,"send","","Returns a future that, given a framed, will resolve to a tuple (response?, framed).",8,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"new","","Creates a new HTTP codec.",9,{"inputs":[],"output":{"name":"httpcodec"}}],[11,"decode","","",9,null],[11,"encode","","",9,null],[11,"fmt","async_http_client::prelude","",10,null],[11,"as_raw_fd","","",10,null],[11,"poll_read","","",10,null],[11,"poll_write","","",10,null],[11,"read","","",10,null],[11,"write","","",10,null],[11,"flush","","",10,null],[11,"connect","","Create a new TCP stream connected to the specified address.",10,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpStream`, connecting it to the address specified.",10,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"box"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",10,null],[11,"poll_write","","Test whether this socket is ready to be written to or not.",10,null],[11,"local_addr","","Returns the local address that this stream is bound to.",10,null],[11,"peer_addr","","Returns the remote address that this stream is connected to.",10,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",10,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",10,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",10,null],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",10,null],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so\nthe amount of milliseconds between them.",10,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",10,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",10,null],[11,"new","","Creates a new event loop, returning any error that happened during the\ncreation.",11,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads\nbut can be used as a proxy to the event loop itself.",11,null],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn\ntasks from other threads into this event loop.",11,null],[11,"run","","Runs a future until completion, driving the event loop while we&#39;re\notherwise waiting for the future to complete.",11,null],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events\nfor at most `max_wait` (forever if `None`).",11,null]],"paths":[[4,"Method"],[8,"Io"],[8,"Future"],[8,"Sink"],[8,"Stream"],[8,"IntoFuture"],[3,"Header"],[3,"HttpResponse"],[3,"HttpRequest"],[3,"HttpCodec"],[3,"TcpStream"],[3,"Core"]]};
initSearch(searchIndex);
